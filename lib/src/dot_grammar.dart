part of graphlib.dot;
/*
 * Generated by PEG.js 0.7.0.
 *
 * http://pegjs.majda.cz/
 */

quote(s) {
  /*
   * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
   * string literal except for the closing quote character, backslash,
   * carriage return, line separator, paragraph separator, and line feed.
   * Any character may appear in the form of an escape sequence.
   *
   * For portability, we also escape escape all control and non-ASCII
   * characters. Note that "\0" and "\v" escape sequences are not used
   * because JSHint does not like the first and IE the second.
   */
   return '"' + s
    .replaceAll("\\"/*g*/, '\\\\')  // backslash
    .replaceAll('"'/*g*/, '\\"')    // closing quote character
    .replaceAll("\x08"/*g*/, '\\b') // backspace
    .replaceAll("\t"/*g*/, '\\t')   // horizontal tab
    .replaceAll("\n"/*g*/, '\\n')   // line feed
    .replaceAll("\f"/*g*/, '\\f')   // form feed
    .replaceAll("\r"/*g*/, '\\r')   // carriage return
//    .replaceAll("[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]"/*g*/, escape)
    + '"';
}

padLeft(input, padding, length) {
  var result = input;

  var padLength = length - input.length;
  for (var i = 0; i < padLength; i++) {
    result = padding + result;
  }

  return result;
}

escape(ch) {
  var charCode = ch.codeUnitAt(0);
  var escapeChar;
  var length;

  if (charCode <= 0xFF) {
    escapeChar = 'x';
    length = 2;
  } else {
    escapeChar = 'u';
    length = 4;
  }

  return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
}

class Parser {
  int pos = 0;
  int reportFailures = 0;
  int rightmostFailuresPos = 0;
  List rightmostFailuresExpected = [];

  bool directed = false;

  String input;

  /**
   * Parses the input with a generated parser. If the parsing is successfull,
   * returns a value explicitly or implicitly specified by the grammar from
   * which the parser was generated. If the parsing is
   * unsuccessful, throws [SyntaxError] describing the error.
   */
  parse(String input, [String startRule=null]) {
    this.input = input;

    var parseFunctions = {
      "start": parse_start,
      "graphStmt": parse_graphStmt,
      "stmtList": parse_stmtList,
      "stmt": parse_stmt,
      "attrStmt": parse_attrStmt,
      "inlineAttrStmt": parse_inlineAttrStmt,
      "nodeStmt": parse_nodeStmt,
      "edgeStmt": parse_edgeStmt,
      "subgraphStmt": parse_subgraphStmt,
      "attrList": parse_attrList,
      "attrListBlock": parse_attrListBlock,
      "aList": parse_aList,
      "edgeRHS": parse_edgeRHS,
      "idDef": parse_idDef,
      "nodeIdOrSubgraph": parse_nodeIdOrSubgraph,
      "nodeId": parse_nodeId,
      "port": parse_port,
      "compassPt": parse_compassPt,
      "id": parse_id,
      "node": parse_node,
      "edge": parse_edge,
      "graph": parse_graph,
      "digraph": parse_digraph,
      "subgraph": parse_subgraph,
      "strict": parse_strict,
      "graphType": parse_graphType,
      "whitespace": parse_whitespace,
      "comment": parse_comment,
      "_": parse__
    };

    directed = false;

    if (startRule != null) {
      if (parseFunctions[startRule] == null) {
        throw new Exception("Invalid rule name: " + quote(startRule) + ".");
      }
    } else {
      startRule = "start";
    }

    pos = 0;
    reportFailures = 0;
    rightmostFailuresPos = 0;
    rightmostFailuresExpected = [];

    var result = parseFunctions[startRule]();

    /*
     * The parser is now in one of the following three states:
     *
     * 1. The parser successfully parsed the whole input.
     *
     *    - |result != null|
     *    - |pos == input.length|
     *    - |rightmostFailuresExpected| may or may not contain something
     *
     * 2. The parser successfully parsed only a part of the input.
     *
     *    - |result != null|
     *    - |pos < input.length|
     *    - |rightmostFailuresExpected| may or may not contain something
     *
     * 3. The parser did not successfully parse any part of the input.
     *
     *   - |result == null|
     *   - |pos == 0|
     *   - |rightmostFailuresExpected| contains at least one failure
     *
     * All code following this comment (including called functions) must
     * handle these states.
     */
    if (result == null || pos != input.length) {
      var offset = Math.max(pos, rightmostFailuresPos);
      var found = offset < input.length ? charAt(input, offset) : null;
      var errorPosition = computeErrorPosition();

      throw new SyntaxError(
        cleanupExpected(rightmostFailuresExpected),
        found,
        offset,
        errorPosition['line'],
        errorPosition['column']
      );
    }

    return result;
  }

  matchFailed(failure) {
    if (pos < rightmostFailuresPos) {
      return;
    }

    if (pos > rightmostFailuresPos) {
      rightmostFailuresPos = pos;
      rightmostFailuresExpected = [];
    }

    rightmostFailuresExpected.add(failure);
  }

  parse_start() {
    var result0, result1;

    result1 = parse_graphStmt();
    if (result1 != null) {
      result0 = [];
      while (result1 != null) {
        result0.add(result1);
        result1 = parse_graphStmt();
      }
    } else {
      result0 = null;
    }
    return result0;
  }

  parse_graphStmt() {
    var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11, result12;
    var pos0, pos1, pos2;

    pos0 = pos;
    pos1 = pos;
    result0 = [];
    result1 = parse__();
    while (result1 != null) {
      result0.add(result1);
      result1 = parse__();
    }
    if (result0 != null) {
      pos2 = pos;
      result1 = parse_strict();
      if (result1 != null) {
        result2 = parse__();
        if (result2 != null) {
          result1 = [result1, result2];
        } else {
          result1 = null;
          pos = pos2;
        }
      } else {
        result1 = null;
        pos = pos2;
      }
      result1 = result1 != null ? result1 : "";
      if (result1 != null) {
        result2 = parse_graphType();
        if (result2 != null) {
          result3 = [];
          result4 = parse__();
          while (result4 != null) {
            result3.add(result4);
            result4 = parse__();
          }
          if (result3 != null) {
            result4 = parse_id();
            result4 = result4 != null ? result4 : "";
            if (result4 != null) {
              result5 = [];
              result6 = parse__();
              while (result6 != null) {
                result5.add(result6);
                result6 = parse__();
              }
              if (result5 != null) {
                if (input.codeUnitAt(pos) == 123) {
                  result6 = "{";
                  pos++;
                } else {
                  result6 = null;
                  if (reportFailures == 0) {
                    matchFailed("\"{\"");
                  }
                }
                if (result6 != null) {
                  result7 = [];
                  result8 = parse__();
                  while (result8 != null) {
                    result7.add(result8);
                    result8 = parse__();
                  }
                  if (result7 != null) {
                    result8 = parse_stmtList();
                    result8 = result8 != null ? result8 : "";
                    if (result8 != null) {
                      result9 = [];
                      result10 = parse__();
                      while (result10 != null) {
                        result9.add(result10);
                        result10 = parse__();
                      }
                      if (result9 != null) {
                        if (input.codeUnitAt(pos) == 125) {
                          result10 = "}";
                          pos++;
                        } else {
                          result10 = null;
                          if (reportFailures == 0) {
                            matchFailed("\"}\"");
                          }
                        }
                        if (result10 != null) {
                          result11 = [];
                          result12 = parse__();
                          while (result12 != null) {
                            result11.add(result12);
                            result12 = parse__();
                          }
                          if (result11 != null) {
                            result0 = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10, result11];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, type, id, stmts) {
            return {'type': type, 'id': id, 'stmts': stmts};
          })(pos0, result0[2], result0[4], result0[8]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_stmtList() {
    var result0, result1, result2, result3, result4, result5, result6, result7;
    var pos0, pos1, pos2;

    pos0 = pos;
    pos1 = pos;
    result0 = parse_stmt();
    if (result0 != null) {
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        if (input.codeUnitAt(pos) == 59) {
          result2 = ";";
          pos++;
        } else {
          result2 = null;
          if (reportFailures == 0) {
            matchFailed("\";\"");
          }
        }
        result2 = result2 != null ? result2 : "";
        if (result2 != null) {
          result3 = [];
          pos2 = pos;
          result4 = [];
          result5 = parse__();
          while (result5 != null) {
            result4.add(result5);
            result5 = parse__();
          }
          if (result4 != null) {
            result5 = parse_stmt();
            if (result5 != null) {
              result6 = [];
              result7 = parse__();
              while (result7 != null) {
                result6.add(result7);
                result7 = parse__();
              }
              if (result6 != null) {
                if (input.codeUnitAt(pos) == 59) {
                  result7 = ";";
                  pos++;
                } else {
                  result7 = null;
                  if (reportFailures == 0) {
                    matchFailed("\";\"");
                  }
                }
                result7 = result7 != null ? result7 : "";
                if (result7 != null) {
                  result4 = [result4, result5, result6, result7];
                } else {
                  result4 = null;
                  pos = pos2;
                }
              } else {
                result4 = null;
                pos = pos2;
              }
            } else {
              result4 = null;
              pos = pos2;
            }
          } else {
            result4 = null;
            pos = pos2;
          }
          while (result4 != null) {
            result3.add(result4);
            pos2 = pos;
            result4 = [];
            result5 = parse__();
            while (result5 != null) {
              result4.add(result5);
              result5 = parse__();
            }
            if (result4 != null) {
              result5 = parse_stmt();
              if (result5 != null) {
                result6 = [];
                result7 = parse__();
                while (result7 != null) {
                  result6.add(result7);
                  result7 = parse__();
                }
                if (result6 != null) {
                  if (input.codeUnitAt(pos) == 59) {
                    result7 = ";";
                    pos++;
                  } else {
                    result7 = null;
                    if (reportFailures == 0) {
                      matchFailed("\";\"");
                    }
                  }
                  result7 = result7 != null ? result7 : "";
                  if (result7 != null) {
                    result4 = [result4, result5, result6, result7];
                  } else {
                    result4 = null;
                    pos = pos2;
                  }
                } else {
                  result4 = null;
                  pos = pos2;
                }
              } else {
                result4 = null;
                pos = pos2;
              }
            } else {
              result4 = null;
              pos = pos2;
            }
          }
          if (result3 != null) {
            result0 = [result0, result1, result2, result3];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, first, rest) {
            var result = [first];
            for (var i = 0; i < rest.length; ++i) {
                result.add(rest[i][1]);
            }
            return result;
          })(pos0, result0[0], result0[3]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_stmt() {
    var result0;

    result0 = parse_attrStmt();
    if (result0 == null) {
      result0 = parse_edgeStmt();
      if (result0 == null) {
        result0 = parse_subgraphStmt();
        if (result0 == null) {
          result0 = parse_inlineAttrStmt();
          if (result0 == null) {
            result0 = parse_nodeStmt();
          }
        }
      }
    }
    return result0;
  }

  parse_attrStmt() {
    var result0, result1, result2;
    var pos0, pos1;

    pos0 = pos;
    pos1 = pos;
    result0 = parse_graph();
    if (result0 == null) {
      result0 = parse_node();
      if (result0 == null) {
        result0 = parse_edge();
      }
    }
    if (result0 != null) {
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        result2 = parse_attrList();
        if (result2 != null) {
          result0 = [result0, result1, result2];
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, type, attrs) {
            return { 'type': "attr", 'attrType': type, 'attrs': attrs != null && attrs.length > 0 ? attrs : {}};
          })(pos0, result0[0], result0[2]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_inlineAttrStmt() {
    var result0, result1, result2, result3, result4;
    var pos0, pos1;

    pos0 = pos;
    pos1 = pos;
    result0 = parse_id();
    if (result0 != null) {
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        if (input.codeUnitAt(pos) == 61) {
          result2 = "=";
          pos++;
        } else {
          result2 = null;
          if (reportFailures == 0) {
            matchFailed("\"=\"");
          }
        }
        if (result2 != null) {
          result3 = [];
          result4 = parse__();
          while (result4 != null) {
            result3.add(result4);
            result4 = parse__();
          }
          if (result3 != null) {
            result4 = parse_id();
            if (result4 != null) {
              result0 = [result0, result1, result2, result3, result4];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, k, v) {
            var attrs = {};
            attrs[k] = v;
            return { 'type': "inlineAttr", 'attrs': attrs };
          })(pos0, result0[0], result0[4]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_nodeStmt() {
    var result0, result1, result2;
    var pos0, pos1;

    pos0 = pos;
    pos1 = pos;
    result0 = parse_nodeId();
    if (result0 != null) {
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        result2 = parse_attrList();
        result2 = result2 != null ? result2 : "";
        if (result2 != null) {
          result0 = [result0, result1, result2];
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, id, attrs) { return {'type': "node", 'id': id, 'attrs': attrs != null && attrs.length > 0 ? attrs : {}}; })(pos0, result0[0], result0[2]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_edgeStmt() {
    var result0, result1, result2, result3, result4;
    var pos0, pos1;

    pos0 = pos;
    pos1 = pos;
    result0 = parse_nodeIdOrSubgraph();
    if (result0 != null) {
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        result2 = parse_edgeRHS();
        if (result2 != null) {
          result3 = [];
          result4 = parse__();
          while (result4 != null) {
            result3.add(result4);
            result4 = parse__();
          }
          if (result3 != null) {
            result4 = parse_attrList();
            result4 = result4 != null ? result4 : "";
            if (result4 != null) {
              result0 = [result0, result1, result2, result3, result4];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, lhs, rhs, attrs) {
            var elems = [lhs];
            for (var i = 0; i < rhs.length; ++i) {
                elems.add(rhs[i]);
            }
            return { 'type': "edge", 'elems': elems, 'attrs': attrs != null && attrs.length > 0 ? attrs : {} };
          })(pos0, result0[0], result0[2], result0[4]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_subgraphStmt() {
    var result0, result1, result2, result3, result4, result5;
    var pos0, pos1, pos2, pos3;

    pos0 = pos;
    pos1 = pos;
    pos2 = pos;
    result0 = parse_subgraph();
    if (result0 != null) {
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        pos3 = pos;
        result2 = parse_id();
        if (result2 != null) {
          result3 = [];
          result4 = parse__();
          while (result4 != null) {
            result3.add(result4);
            result4 = parse__();
          }
          if (result3 != null) {
            result2 = [result2, result3];
          } else {
            result2 = null;
            pos = pos3;
          }
        } else {
          result2 = null;
          pos = pos3;
        }
        result2 = result2 != null ? result2 : "";
        if (result2 != null) {
          result0 = [result0, result1, result2];
        } else {
          result0 = null;
          pos = pos2;
        }
      } else {
        result0 = null;
        pos = pos2;
      }
    } else {
      result0 = null;
      pos = pos2;
    }
    result0 = result0 != null ? result0 : "";
    if (result0 != null) {
      if (input.codeUnitAt(pos) == 123) {
        result1 = "{";
        pos++;
      } else {
        result1 = null;
        if (reportFailures == 0) {
          matchFailed("\"{\"");
        }
      }
      if (result1 != null) {
        result2 = [];
        result3 = parse__();
        while (result3 != null) {
          result2.add(result3);
          result3 = parse__();
        }
        if (result2 != null) {
          result3 = parse_stmtList();
          result3 = result3 != null ? result3 : "";
          if (result3 != null) {
            result4 = [];
            result5 = parse__();
            while (result5 != null) {
              result4.add(result5);
              result5 = parse__();
            }
            if (result4 != null) {
              if (input.codeUnitAt(pos) == 125) {
                result5 = "}";
                pos++;
              } else {
                result5 = null;
                if (reportFailures == 0) {
                  matchFailed("\"}\"");
                }
              }
              if (result5 != null) {
                result0 = [result0, result1, result2, result3, result4, result5];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, id, stmts) {
            id = id.length > 2 && id[2].length != 0 ? id[2] : [null];
            return { 'type': "subgraph", 'id': id[0], 'stmts': stmts };
          })(pos0, result0[0], result0[3]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_attrList() {
    var result0, result1, result2, result3;
    var pos0, pos1, pos2;

    pos0 = pos;
    pos1 = pos;
    result0 = parse_attrListBlock();
    if (result0 != null) {
      result1 = [];
      pos2 = pos;
      result2 = [];
      result3 = parse__();
      while (result3 != null) {
        result2.add(result3);
        result3 = parse__();
      }
      if (result2 != null) {
        result3 = parse_attrListBlock();
        if (result3 != null) {
          result2 = [result2, result3];
        } else {
          result2 = null;
          pos = pos2;
        }
      } else {
        result2 = null;
        pos = pos2;
      }
      while (result2 != null) {
        result1.add(result2);
        pos2 = pos;
        result2 = [];
        result3 = parse__();
        while (result3 != null) {
          result2.add(result3);
          result3 = parse__();
        }
        if (result2 != null) {
          result3 = parse_attrListBlock();
          if (result3 != null) {
            result2 = [result2, result3];
          } else {
            result2 = null;
            pos = pos2;
          }
        } else {
          result2 = null;
          pos = pos2;
        }
      }
      if (result1 != null) {
        result0 = [result0, result1];
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, first, rest) {
            var result = first;
            for (var i = 0; i < rest.length; ++i) {
                result = rightBiasedMerge(result, rest[i][1]);
            }
            return result;
          })(pos0, result0[0], result0[1]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_attrListBlock() {
    var result0, result1, result2, result3, result4;
    var pos0, pos1;

    pos0 = pos;
    pos1 = pos;
    if (input.codeUnitAt(pos) == 91) {
      result0 = "[";
      pos++;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\"[\"");
      }
    }
    if (result0 != null) {
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        result2 = parse_aList();
        result2 = result2 != null ? result2 : "";
        if (result2 != null) {
          result3 = [];
          result4 = parse__();
          while (result4 != null) {
            result3.add(result4);
            result4 = parse__();
          }
          if (result3 != null) {
            if (input.codeUnitAt(pos) == 93) {
              result4 = "]";
              pos++;
            } else {
              result4 = null;
              if (reportFailures == 0) {
                matchFailed("\"]\"");
              }
            }
            if (result4 != null) {
              result0 = [result0, result1, result2, result3, result4];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, aList) { return aList; })(pos0, result0[2]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_aList() {
    var result0, result1, result2, result3, result4, result5;
    var pos0, pos1, pos2;

    pos0 = pos;
    pos1 = pos;
    result0 = parse_idDef();
    if (result0 != null) {
      result1 = [];
      pos2 = pos;
      result2 = [];
      result3 = parse__();
      while (result3 != null) {
        result2.add(result3);
        result3 = parse__();
      }
      if (result2 != null) {
        if (input.codeUnitAt(pos) == 44) {
          result3 = ",";
          pos++;
        } else {
          result3 = null;
          if (reportFailures == 0) {
            matchFailed("\",\"");
          }
        }
        result3 = result3 != null ? result3 : "";
        if (result3 != null) {
          result4 = [];
          result5 = parse__();
          while (result5 != null) {
            result4.add(result5);
            result5 = parse__();
          }
          if (result4 != null) {
            result5 = parse_idDef();
            if (result5 != null) {
              result2 = [result2, result3, result4, result5];
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
        } else {
          result2 = null;
          pos = pos2;
        }
      } else {
        result2 = null;
        pos = pos2;
      }
      while (result2 != null) {
        result1.add(result2);
        pos2 = pos;
        result2 = [];
        result3 = parse__();
        while (result3 != null) {
          result2.add(result3);
          result3 = parse__();
        }
        if (result2 != null) {
          if (input.codeUnitAt(pos) == 44) {
            result3 = ",";
            pos++;
          } else {
            result3 = null;
            if (reportFailures == 0) {
              matchFailed("\",\"");
            }
          }
          result3 = result3 != null ? result3 : "";
          if (result3 != null) {
            result4 = [];
            result5 = parse__();
            while (result5 != null) {
              result4.add(result5);
              result5 = parse__();
            }
            if (result4 != null) {
              result5 = parse_idDef();
              if (result5 != null) {
                result2 = [result2, result3, result4, result5];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
          } else {
            result2 = null;
            pos = pos2;
          }
        } else {
          result2 = null;
          pos = pos2;
        }
      }
      if (result1 != null) {
        result0 = [result0, result1];
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, first, rest) {
            var result = first;
            for (var i = 0; i < rest.length; ++i) {
                result = rightBiasedMerge(result, rest[i][3]);
            }
            return result;
          })(pos0, result0[0], result0[1]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_edgeRHS() {
    var result0, result1, result2, result3, result4;
    var pos0, pos1, pos2;

    pos0 = pos;
    pos1 = pos;
    pos2 = pos;
    if (substr(input, pos, 2) == "--") {
      result0 = "--";
      pos += 2;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\"--\"");
      }
    }
    if (result0 != null) {
      result1 = ((offset) { return directed; })(pos) ? null : "";
      if (result1 != null) {
        result0 = [result0, result1];
      } else {
        result0 = null;
        pos = pos2;
      }
    } else {
      result0 = null;
      pos = pos2;
    }
    if (result0 == null) {
      pos2 = pos;
      if (substr(input, pos, 2) == "->") {
        result0 = "->";
        pos += 2;
      } else {
        result0 = null;
        if (reportFailures == 0) {
          matchFailed("\"->\"");
        }
      }
      if (result0 != null) {
        result1 = ((offset) { return directed; })(pos) ? "" : null;
        if (result1 != null) {
          result0 = [result0, result1];
        } else {
          result0 = null;
          pos = pos2;
        }
      } else {
        result0 = null;
        pos = pos2;
      }
    }
    if (result0 != null) {
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        result2 = parse_nodeIdOrSubgraph();
        if (result2 != null) {
          result3 = [];
          result4 = parse__();
          while (result4 != null) {
            result3.add(result4);
            result4 = parse__();
          }
          if (result3 != null) {
            result4 = parse_edgeRHS();
            result4 = result4 != null ? result4 : "";
            if (result4 != null) {
              result0 = [result0, result1, result2, result3, result4];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, rhs, rest) {
            var result = [rhs];
            for (var i = 0; i < rest.length; ++i) {
                result.add(rest[i]);
            }
            return result;
          })(pos0, result0[2], result0[4]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_idDef() {
    var result0, result1, result2, result3, result4;
    var pos0, pos1, pos2;

    pos0 = pos;
    pos1 = pos;
    result0 = parse_id();
    if (result0 != null) {
      pos2 = pos;
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        if (input.codeUnitAt(pos) == 61) {
          result2 = "=";
          pos++;
        } else {
          result2 = null;
          if (reportFailures == 0) {
            matchFailed("\"=\"");
          }
        }
        if (result2 != null) {
          result3 = [];
          result4 = parse__();
          while (result4 != null) {
            result3.add(result4);
            result4 = parse__();
          }
          if (result3 != null) {
            result4 = parse_id();
            if (result4 != null) {
              result1 = [result1, result2, result3, result4];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
        } else {
          result1 = null;
          pos = pos2;
        }
      } else {
        result1 = null;
        pos = pos2;
      }
      result1 = result1 != null ? result1 : "";
      if (result1 != null) {
        result0 = [result0, result1];
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, k, v) {
            var result = {};
//            result[k] = convert(v[3]);
            result[k] = v[3];
            return result;
          })(pos0, result0[0], result0[1]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_nodeIdOrSubgraph() {
    var result0;
    var pos0;

    result0 = parse_subgraphStmt();
    if (result0 == null) {
      pos0 = pos;
      result0 = parse_nodeId();
      if (result0 != null) {
        result0 = ((offset, id) { return { 'type': "node", 'id': id, 'attrs': {} }; })(pos0, result0);
      }
      if (result0 == null) {
        pos = pos0;
      }
    }
    return result0;
  }

  parse_nodeId() {
    var result0, result1, result2;
    var pos0, pos1;

    pos0 = pos;
    pos1 = pos;
    result0 = parse_id();
    if (result0 != null) {
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        result2 = parse_port();
        result2 = result2 != null ? result2 : "";
        if (result2 != null) {
          result0 = [result0, result1, result2];
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, id) {
        //return convert(id);
        return id;
      })(pos0, result0[0]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_port() {
    var result0, result1, result2, result3, result4, result5, result6;
    var pos0, pos1;

    pos0 = pos;
    if (input.codeUnitAt(pos) == 58) {
      result0 = ":";
      pos++;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\":\"");
      }
    }
    if (result0 != null) {
      result1 = [];
      result2 = parse__();
      while (result2 != null) {
        result1.add(result2);
        result2 = parse__();
      }
      if (result1 != null) {
        result2 = parse_id();
        if (result2 != null) {
          result3 = [];
          result4 = parse__();
          while (result4 != null) {
            result3.add(result4);
            result4 = parse__();
          }
          if (result3 != null) {
            pos1 = pos;
            if (input.codeUnitAt(pos) == 58) {
              result4 = ":";
              pos++;
            } else {
              result4 = null;
              if (reportFailures == 0) {
                matchFailed("\":\"");
              }
            }
            if (result4 != null) {
              result5 = [];
              result6 = parse__();
              while (result6 != null) {
                result5.add(result6);
                result6 = parse__();
              }
              if (result5 != null) {
                result6 = parse_compassPt();
                if (result6 != null) {
                  result4 = [result4, result5, result6];
                } else {
                  result4 = null;
                  pos = pos1;
                }
              } else {
                result4 = null;
                pos = pos1;
              }
            } else {
              result4 = null;
              pos = pos1;
            }
            result4 = result4 != null ? result4 : "";
            if (result4 != null) {
              result0 = [result0, result1, result2, result3, result4];
            } else {
              result0 = null;
              pos = pos0;
            }
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
      } else {
        result0 = null;
        pos = pos0;
      }
    } else {
      result0 = null;
      pos = pos0;
    }
    return result0;
  }

  parse_compassPt() {
    var result0;

    if (substr(input, pos, 2) == "ne") {
      result0 = "ne";
      pos += 2;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\"ne\"");
      }
    }
    if (result0 == null) {
      if (substr(input, pos, 2) == "se") {
        result0 = "se";
        pos += 2;
      } else {
        result0 = null;
        if (reportFailures == 0) {
          matchFailed("\"se\"");
        }
      }
      if (result0 == null) {
        if (substr(input, pos, 2) == "sw") {
          result0 = "sw";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures == 0) {
            matchFailed("\"sw\"");
          }
        }
        if (result0 == null) {
          if (substr(input, pos, 2) == "nw") {
            result0 = "nw";
            pos += 2;
          } else {
            result0 = null;
            if (reportFailures == 0) {
              matchFailed("\"nw\"");
            }
          }
          if (result0 == null) {
            if (input.codeUnitAt(pos) == 110) {
              result0 = "n";
              pos++;
            } else {
              result0 = null;
              if (reportFailures == 0) {
                matchFailed("\"n\"");
              }
            }
            if (result0 == null) {
              if (input.codeUnitAt(pos) == 101) {
                result0 = "e";
                pos++;
              } else {
                result0 = null;
                if (reportFailures == 0) {
                  matchFailed("\"e\"");
                }
              }
              if (result0 == null) {
                if (input.codeUnitAt(pos) == 115) {
                  result0 = "s";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures == 0) {
                    matchFailed("\"s\"");
                  }
                }
                if (result0 == null) {
                  if (input.codeUnitAt(pos) == 119) {
                    result0 = "w";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures == 0) {
                      matchFailed("\"w\"");
                    }
                  }
                  if (result0 == null) {
                    if (input.codeUnitAt(pos) == 99) {
                      result0 = "c";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures == 0) {
                        matchFailed("\"c\"");
                      }
                    }
                    if (result0 == null) {
                      if (input.codeUnitAt(pos) == 95) {
                        result0 = "_";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures == 0) {
                          matchFailed("\"_\"");
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return result0;
  }

  parse_id() {
    var result0, result1, result2, result3, result4;
    var pos0, pos1, pos2, pos3;

    reportFailures++;
    pos0 = pos;
    pos1 = pos;
    if (new RegExp(r"^[a-zA-Z\u0200-\u0377_]").hasMatch(charAt(input, pos))) {
      result0 = charAt(input, pos);
      pos++;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("[a-zA-Z\\u0200-\\u0377_]");
      }
    }
    if (result0 != null) {
      result1 = [];
      if (new RegExp(r"^[a-zA-Z\u0200-\u0377_0-9]").hasMatch(charAt(input, pos))) {
        result2 = charAt(input, pos);
        pos++;
      } else {
        result2 = null;
        if (reportFailures == 0) {
          matchFailed("[a-zA-Z\\u0200-\\u0377_0-9]");
        }
      }
      while (result2 != null) {
        result1.add(result2);
        if (new RegExp(r"^[a-zA-Z\u0200-\u0377_0-9]").hasMatch(charAt(input, pos))) {
          result2 = charAt(input, pos);
          pos++;
        } else {
          result2 = null;
          if (reportFailures == 0) {
            matchFailed("[a-zA-Z\\u0200-\\u0377_0-9]");
          }
        }
      }
      if (result1 != null) {
        result0 = [result0, result1];
      } else {
        result0 = null;
        pos = pos1;
      }
    } else {
      result0 = null;
      pos = pos1;
    }
    if (result0 != null) {
      result0 = ((offset, fst, rest) { return fst + rest.join(""); })(pos0, result0[0], result0[1]);
    }
    if (result0 == null) {
      pos = pos0;
    }
    if (result0 == null) {
      pos0 = pos;
      pos1 = pos;
      if (input.codeUnitAt(pos) == 45) {
        result0 = "-";
        pos++;
      } else {
        result0 = null;
        if (reportFailures == 0) {
          matchFailed("\"-\"");
        }
      }
      result0 = result0 != null ? result0 : "";
      if (result0 != null) {
        if (input.codeUnitAt(pos) == 46) {
          result1 = ".";
          pos++;
        } else {
          result1 = null;
          if (reportFailures == 0) {
            matchFailed("\".\"");
          }
        }
        if (result1 != null) {
          if (new RegExp(r"^[0-9]").hasMatch(charAt(input, pos))) {
            result3 = charAt(input, pos);
            pos++;
          } else {
            result3 = null;
            if (reportFailures == 0) {
              matchFailed("[0-9]");
            }
          }
          if (result3 != null) {
            result2 = [];
            while (result3 != null) {
              result2.add(result3);
              if (new RegExp(r"^[0-9]").hasMatch(charAt(input, pos))) {
                result3 = charAt(input, pos);
                pos++;
              } else {
                result3 = null;
                if (reportFailures == 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result2 = null;
          }
          if (result2 != null) {
            result0 = [result0, result1, result2];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
      } else {
        result0 = null;
        pos = pos1;
      }
      if (result0 != null) {
        result0 = ((offset, sign, dot, after) {
          return sign + dot + after.join("");
        })(pos0, result0[0], result0[1], result0[2]);
      }
      if (result0 == null) {
        pos = pos0;
      }
      if (result0 == null) {
        pos0 = pos;
        pos1 = pos;
        if (input.codeUnitAt(pos) == 45) {
          result0 = "-";
          pos++;
        } else {
          result0 = null;
          if (reportFailures == 0) {
            matchFailed("\"-\"");
          }
        }
        result0 = result0 != null ? result0 : "";
        if (result0 != null) {
          if (new RegExp(r"^[0-9]").hasMatch(charAt(input, pos))) {
            result2 = charAt(input, pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures == 0) {
              matchFailed("[0-9]");
            }
          }
          if (result2 != null) {
            result1 = [];
            while (result2 != null) {
              result1.add(result2);
              if (new RegExp(r"^[0-9]").hasMatch(charAt(input, pos))) {
                result2 = charAt(input, pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures == 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 != null) {
            pos2 = pos;
            if (input.codeUnitAt(pos) == 46) {
              result2 = ".";
              pos++;
            } else {
              result2 = null;
              if (reportFailures == 0) {
                matchFailed("\".\"");
              }
            }
            if (result2 != null) {
              result3 = [];
              if (new RegExp(r"^[0-9]").hasMatch(charAt(input, pos))) {
                result4 = charAt(input, pos);
                pos++;
              } else {
                result4 = null;
                if (reportFailures == 0) {
                  matchFailed("[0-9]");
                }
              }
              while (result4 != null) {
                result3.add(result4);
                if (new RegExp(r"^[0-9]").hasMatch(charAt(input, pos))) {
                  result4 = charAt(input, pos);
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures == 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
              if (result3 != null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos2;
              }
            } else {
              result2 = null;
              pos = pos2;
            }
            result2 = result2 != null ? result2 : "";
            if (result2 != null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 != null) {
          result0 = ((offset, sign, before, after) {
            return sign +
                before.join("") + (after.length != 0 ? after[0] : "") +
                (after.length > 1 ? after[1] : []).join("");
          })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 == null) {
          pos = pos0;
        }
        if (result0 == null) {
          pos0 = pos;
          pos1 = pos;
          if (input.codeUnitAt(pos) == 34) {
            result0 = "\"";
            pos++;
          } else {
            result0 = null;
            if (reportFailures == 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result0 != null) {
            result1 = [];
            pos2 = pos;
            if (substr(input, pos, 2) == "\\\"") {
              result2 = "\\\"";
              pos += 2;
            } else {
              result2 = null;
              if (reportFailures == 0) {
                matchFailed("\"\\\\\\\"\"");
              }
            }
            if (result2 != null) {
              result2 = ((offset) { return '"'; })(pos2);
            }
            if (result2 == null) {
              pos = pos2;
            }
            if (result2 == null) {
              pos2 = pos;
              pos3 = pos;
              if (input.codeUnitAt(pos) == 92) {
                result2 = "\\";
                pos++;
              } else {
                result2 = null;
                if (reportFailures == 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (result2 != null) {
                if (new RegExp(r'^[^"]').hasMatch(charAt(input, pos))) {
                  result3 = charAt(input, pos);
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures == 0) {
                    matchFailed("[^\"]");
                  }
                }
                if (result3 != null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = pos3;
                }
              } else {
                result2 = null;
                pos = pos3;
              }
              if (result2 != null) {
                result2 = ((offset, ch) { return "\\" + ch; })(pos2, result2[1]);
              }
              if (result2 == null) {
                pos = pos2;
              }
              if (result2 == null) {
                if (new RegExp(r'^[^"]').hasMatch(charAt(input, pos))) {
                  result2 = charAt(input, pos);
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures == 0) {
                    matchFailed("[^\"]");
                  }
                }
              }
            }
            while (result2 != null) {
              result1.add(result2);
              pos2 = pos;
              if (substr(input, pos, 2) == "\\\"") {
                result2 = "\\\"";
                pos += 2;
              } else {
                result2 = null;
                if (reportFailures == 0) {
                  matchFailed("\"\\\\\\\"\"");
                }
              }
              if (result2 != null) {
                result2 = ((offset) { return '"'; })(pos2);
              }
              if (result2 == null) {
                pos = pos2;
              }
              if (result2 == null) {
                pos2 = pos;
                pos3 = pos;
                if (input.codeUnitAt(pos) == 92) {
                  result2 = "\\";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures == 0) {
                    matchFailed("\"\\\\\"");
                  }
                }
                if (result2 != null) {
                  if (new RegExp(r'^[^"]').hasMatch(charAt(input, pos))) {
                    result3 = charAt(input, pos);
                    pos++;
                  } else {
                    result3 = null;
                    if (reportFailures == 0) {
                      matchFailed("[^\"]");
                    }
                  }
                  if (result3 != null) {
                    result2 = [result2, result3];
                  } else {
                    result2 = null;
                    pos = pos3;
                  }
                } else {
                  result2 = null;
                  pos = pos3;
                }
                if (result2 != null) {
                  result2 = ((offset, ch) { return "\\" + ch; })(pos2, result2[1]);
                }
                if (result2 == null) {
                  pos = pos2;
                }
                if (result2 == null) {
                  if (new RegExp(r'^[^"]').hasMatch(charAt(input, pos))) {
                    result2 = charAt(input, pos);
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures == 0) {
                      matchFailed("[^\"]");
                    }
                  }
                }
              }
            }
            if (result1 != null) {
              if (input.codeUnitAt(pos) == 34) {
                result2 = "\"";
                pos++;
              } else {
                result2 = null;
                if (reportFailures == 0) {
                  matchFailed("\"\\\"\"");
                }
              }
              if (result2 != null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 != null) {
            result0 = ((offset, id) {
              return id.join("");
            })(pos0, result0[1]);
          }
          if (result0 == null) {
            pos = pos0;
          }
        }
      }
    }
    reportFailures--;
    if (reportFailures == 0 && result0 == null) {
      matchFailed("identifier");
    }
    return result0;
  }

  parse_node() {
    var result0;
    var pos0;

    pos0 = pos;
    if (substr(input, pos, 4).toLowerCase() == "node") {
      result0 = substr(input, pos, 4);
      pos += 4;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\"node\"");
      }
    }
    if (result0 != null) {
      result0 = ((offset, k) { return k.toLowerCase(); })(pos0, result0);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_edge() {
    var result0;
    var pos0;

    pos0 = pos;
    if (substr(input, pos, 4).toLowerCase() == "edge") {
      result0 = substr(input, pos, 4);
      pos += 4;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\"edge\"");
      }
    }
    if (result0 != null) {
      result0 = ((offset, k) { return k.toLowerCase(); })(pos0, result0);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_graph() {
    var result0;
    var pos0;

    pos0 = pos;
    if (substr(input, pos, 5).toLowerCase() == "graph") {
      result0 = substr(input, pos, 5);
      pos += 5;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\"graph\"");
      }
    }
    if (result0 != null) {
      result0 = ((offset, k) { return k.toLowerCase(); })(pos0, result0);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_digraph() {
    var result0;
    var pos0;

    pos0 = pos;
    if (substr(input, pos, 7).toLowerCase() == "digraph") {
      result0 = substr(input, pos, 7);
      pos += 7;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\"digraph\"");
      }
    }
    if (result0 != null) {
      result0 = ((offset, k) { return k.toLowerCase(); })(pos0, result0);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_subgraph() {
    var result0;
    var pos0;

    pos0 = pos;
    if (substr(input, pos, 8).toLowerCase() == "subgraph") {
      result0 = substr(input, pos, 8);
      pos += 8;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\"subgraph\"");
      }
    }
    if (result0 != null) {
      result0 = ((offset, k) { return k.toLowerCase(); })(pos0, result0);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_strict() {
    var result0;
    var pos0;

    pos0 = pos;
    if (substr(input, pos, 6).toLowerCase() == "strict") {
      result0 = substr(input, pos, 6);
      pos += 6;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\"strict\"");
      }
    }
    if (result0 != null) {
      result0 = ((offset, k) { return k.toLowerCase(); })(pos0, result0);
    }
    if (result0 == null) {
      pos = pos0;
    }
    return result0;
  }

  parse_graphType() {
    var result0;
    var pos0;

    result0 = parse_graph();
    if (result0 == null) {
      pos0 = pos;
      result0 = parse_digraph();
      if (result0 != null) {
        result0 = ((offset, graph) {
              directed = graph == "digraph";
              return graph;
            })(pos0, result0);
      }
      if (result0 == null) {
        pos = pos0;
      }
    }
    return result0;
  }

  parse_whitespace() {
    var result0, result1;

    reportFailures++;
    if (new RegExp(r"^[ \t\r\n]").hasMatch(charAt(input, pos))) {
      result1 = charAt(input, pos);
      pos++;
    } else {
      result1 = null;
      if (reportFailures == 0) {
        matchFailed("[ \\t\\r\\n]");
      }
    }
    if (result1 != null) {
      result0 = [];
      while (result1 != null) {
        result0.add(result1);
        if (new RegExp(r"^[ \t\r\n]").hasMatch(charAt(input, pos))) {
          result1 = charAt(input, pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures == 0) {
            matchFailed("[ \\t\\r\\n]");
          }
        }
      }
    } else {
      result0 = null;
    }
    reportFailures--;
    if (reportFailures == 0 && result0 == null) {
      matchFailed("whitespace");
    }
    return result0;
  }

  parse_comment() {
    var result0, result1, result2, result3;
    var pos0, pos1, pos2;

    reportFailures++;
    pos0 = pos;
    if (substr(input, pos, 2) == "//") {
      result0 = "//";
      pos += 2;
    } else {
      result0 = null;
      if (reportFailures == 0) {
        matchFailed("\"//\"");
      }
    }
    if (result0 != null) {
      result1 = [];
      if (new RegExp(r"^[^\n]").hasMatch(charAt(input, pos))) {
        result2 = charAt(input, pos);
        pos++;
      } else {
        result2 = null;
        if (reportFailures == 0) {
          matchFailed("[^\\n]");
        }
      }
      while (result2 != null) {
        result1.add(result2);
        if (new RegExp(r"^[^\n]").hasMatch(charAt(input, pos))) {
          result2 = charAt(input, pos);
          pos++;
        } else {
          result2 = null;
          if (reportFailures == 0) {
            matchFailed("[^\\n]");
          }
        }
      }
      if (result1 != null) {
        result0 = [result0, result1];
      } else {
        result0 = null;
        pos = pos0;
      }
    } else {
      result0 = null;
      pos = pos0;
    }
    if (result0 == null) {
      pos0 = pos;
      if (substr(input, pos, 2) == "/*") {
        result0 = "/*";
        pos += 2;
      } else {
        result0 = null;
        if (reportFailures == 0) {
          matchFailed("\"/*\"");
        }
      }
      if (result0 != null) {
        result1 = [];
        pos1 = pos;
        pos2 = pos;
        reportFailures++;
        if (substr(input, pos, 2) == "*/") {
          result2 = "*/";
          pos += 2;
        } else {
          result2 = null;
          if (reportFailures == 0) {
            matchFailed("\"*/\"");
          }
        }
        reportFailures--;
        if (result2 == null) {
          result2 = "";
        } else {
          result2 = null;
          pos = pos2;
        }
        if (result2 != null) {
          if (input.length > pos) {
            result3 = charAt(input, pos);
            pos++;
          } else {
            result3 = null;
            if (reportFailures == 0) {
              matchFailed("any character");
            }
          }
          if (result3 != null) {
            result2 = [result2, result3];
          } else {
            result2 = null;
            pos = pos1;
          }
        } else {
          result2 = null;
          pos = pos1;
        }
        while (result2 != null) {
          result1.add(result2);
          pos1 = pos;
          pos2 = pos;
          reportFailures++;
          if (substr(input, pos, 2) == "*/") {
            result2 = "*/";
            pos += 2;
          } else {
            result2 = null;
            if (reportFailures == 0) {
              matchFailed("\"*/\"");
            }
          }
          reportFailures--;
          if (result2 == null) {
            result2 = "";
          } else {
            result2 = null;
            pos = pos2;
          }
          if (result2 != null) {
            if (input.length > pos) {
              result3 = charAt(input, pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures == 0) {
                matchFailed("any character");
              }
            }
            if (result3 != null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos1;
            }
          } else {
            result2 = null;
            pos = pos1;
          }
        }
        if (result1 != null) {
          if (substr(input, pos, 2) == "*/") {
            result2 = "*/";
            pos += 2;
          } else {
            result2 = null;
            if (reportFailures == 0) {
              matchFailed("\"*/\"");
            }
          }
          if (result2 != null) {
            result0 = [result0, result1, result2];
          } else {
            result0 = null;
            pos = pos0;
          }
        } else {
          result0 = null;
          pos = pos0;
        }
      } else {
        result0 = null;
        pos = pos0;
      }
    }
    reportFailures--;
    if (reportFailures == 0 && result0 == null) {
      matchFailed("comment");
    }
    return result0;
  }

  parse__() {
    var result0;

    result0 = parse_whitespace();
    if (result0 == null) {
      result0 = parse_comment();
    }
    return result0;
  }


  cleanupExpected(expected) {
    expected.sort();

    var lastExpected = null;
    var cleanExpected = [];
    for (var i = 0; i < expected.length; i++) {
      if (expected[i] != lastExpected) {
        cleanExpected.add(expected[i]);
        lastExpected = expected[i];
      }
    }
    return cleanExpected;
  }

  computeErrorPosition() {
    /*
     * The first idea was to use |String.split| to break the input up to the
     * error position along newlines and derive the line and column from
     * there. However IE's |split| implementation is so broken that it was
     * enough to prevent it.
     */

    var line = 1;
    var column = 1;
    var seenCR = false;

    for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
      var ch = charAt(input, i);
      if (ch == "\n") {
        if (!seenCR) { line++; }
        column = 1;
        seenCR = false;
      } else if (ch == "\r" || ch == "\u2028" || ch == "\u2029") {
        line++;
        column = 1;
        seenCR = true;
      } else {
        column++;
        seenCR = false;
      }
    }

    return { 'line': line, 'column': column };
  }

  rightBiasedMerge(Map lhs, Map rhs) {
      var result = {};
      for (var k in lhs.keys) {
          result[k] = lhs[k];
      }
      for (var k in rhs.keys) {
          result[k] = rhs[k];
      }
      return result;
  }

}

//return result;
//    },
//
//    /* Returns the parser source code. */
//    'toSource': (thiz) { return thiz._source; }
//  };
//
//
//
//  return result;
//})();


/* Thrown when a parser encounters a syntax error. */
class SyntaxError {

  SyntaxError(expected, found, this.offset, this.line, this.column) :
    this.expected = expected,
    this.found = found,
    message = buildMessage(expected, found);

  static buildMessage(expected, found) {
    var expectedHumanized, foundHumanized;

    switch (expected.length) {
      case 0:
        expectedHumanized = "end of input";
        break;
      case 1:
        expectedHumanized = expected[0];
        break;
      default:
        expectedHumanized = expected.sublist(0, expected.length - 1).join(", ")
          + " or "
          + expected[expected.length - 1];
    }

    foundHumanized = found != null && found.length > 0 ? quote(found) : "end of input";

    return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
  }

  final String name = "SyntaxError";
  final Object expected;
  final Object found;
  final Object message;
  final int offset;
  final int line;
  final int column;

  String toString() => message;
}

String substr(String s, int i, int l) => s.substring(i, Math.min(i+l, s.length));

String charAt(String s, int i) => (i < s.length) ? s[i] : "";

/*Object convert(String s) {
  try {
    return num.parse(s);
  } on FormatException {
    if (s == 'true') return true;
    else if (s == 'false') return false;
  }
  return s;
}*/
